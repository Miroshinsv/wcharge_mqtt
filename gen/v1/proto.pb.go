// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: proto.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandType int32

const (
	CommandType_FORCE_PUSH                        CommandType = 0 //11
	CommandType_QUERY_THE_INVENTORY               CommandType = 1 //13
	CommandType_PUSH_POWER_BANK                   CommandType = 2 //15
	CommandType_QUERY_CABINET_APN                 CommandType = 3 //17
	CommandType_QUERY_SERVER_INFORMATION          CommandType = 4 //18
	CommandType_QUERY_SIM_CARD_ICCID              CommandType = 5 //20
	CommandType_REPLY_TO_RETURN_THE_POWER_BANK    CommandType = 6 //22
	CommandType_QUERY_CABINET_NETWORK_INFORMATION CommandType = 7 //24
	CommandType_RESET_CABINET                     CommandType = 8 //25
)

// Enum value maps for CommandType.
var (
	CommandType_name = map[int32]string{
		0: "FORCE_PUSH",
		1: "QUERY_THE_INVENTORY",
		2: "PUSH_POWER_BANK",
		3: "QUERY_CABINET_APN",
		4: "QUERY_SERVER_INFORMATION",
		5: "QUERY_SIM_CARD_ICCID",
		6: "REPLY_TO_RETURN_THE_POWER_BANK",
		7: "QUERY_CABINET_NETWORK_INFORMATION",
		8: "RESET_CABINET",
	}
	CommandType_value = map[string]int32{
		"FORCE_PUSH":                        0,
		"QUERY_THE_INVENTORY":               1,
		"PUSH_POWER_BANK":                   2,
		"QUERY_CABINET_APN":                 3,
		"QUERY_SERVER_INFORMATION":          4,
		"QUERY_SIM_CARD_ICCID":              5,
		"REPLY_TO_RETURN_THE_POWER_BANK":    6,
		"QUERY_CABINET_NETWORK_INFORMATION": 7,
		"RESET_CABINET":                     8,
	}
)

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_proto_enumTypes[0].Descriptor()
}

func (CommandType) Type() protoreflect.EnumType {
	return &file_proto_proto_enumTypes[0]
}

func (x CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandType.Descriptor instead.
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{0}
}

// Subscribe
type ResponseString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ResponseString) Reset() {
	*x = ResponseString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseString) ProtoMessage() {}

func (x *ResponseString) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseString.ProtoReflect.Descriptor instead.
func (*ResponseString) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{0}
}

func (x *ResponseString) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cabinet      string `protobuf:"bytes,1,opt,name=cabinet,proto3" json:"cabinet,omitempty"`
	DeviceNumber string `protobuf:"bytes,2,opt,name=device_number,json=deviceNumber,proto3" json:"device_number,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{1}
}

func (x *Device) GetCabinet() string {
	if x != nil {
		return x.Cabinet
	}
	return ""
}

func (x *Device) GetDeviceNumber() string {
	if x != nil {
		return x.DeviceNumber
	}
	return ""
}

// Commands
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  *Device     `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	CmdType CommandType `protobuf:"varint,2,opt,name=cmd_type,json=cmdType,proto3,enum=wcharge_mqtt.CommandType" json:"cmd_type,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{2}
}

func (x *Command) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Command) GetCmdType() CommandType {
	if x != nil {
		return x.CmdType
	}
	return CommandType_FORCE_PUSH
}

// Push Power Bank (Force Push)
type RequestPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlSlot uint32 `protobuf:"varint,1,opt,name=rl_slot,json=rlSlot,proto3" json:"rl_slot,omitempty"`
	RlSeq  uint32 `protobuf:"varint,2,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *RequestPush) Reset() {
	*x = RequestPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPush) ProtoMessage() {}

func (x *RequestPush) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPush.ProtoReflect.Descriptor instead.
func (*RequestPush) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{3}
}

func (x *RequestPush) GetRlSlot() uint32 {
	if x != nil {
		return x.RlSlot
	}
	return 0
}

func (x *RequestPush) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

type CommandPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Push   *RequestPush `protobuf:"bytes,1,opt,name=push,proto3" json:"push,omitempty"`
	Device *Device      `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CommandPush) Reset() {
	*x = CommandPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPush) ProtoMessage() {}

func (x *CommandPush) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPush.ProtoReflect.Descriptor instead.
func (*CommandPush) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{4}
}

func (x *CommandPush) GetPush() *RequestPush {
	if x != nil {
		return x.Push
	}
	return nil
}

func (x *CommandPush) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type ResponsePush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlSlot   uint32 `protobuf:"varint,1,opt,name=rl_slot,json=rlSlot,proto3" json:"rl_slot,omitempty"`
	RlPbid   uint64 `protobuf:"varint,2,opt,name=rl_pbid,json=rlPbid,proto3" json:"rl_pbid,omitempty"`
	RlResult uint32 `protobuf:"varint,3,opt,name=rl_result,json=rlResult,proto3" json:"rl_result,omitempty"`
	RlCode   uint32 `protobuf:"varint,4,opt,name=rl_code,json=rlCode,proto3" json:"rl_code,omitempty"`
	RlLock   uint32 `protobuf:"varint,5,opt,name=rl_lock,json=rlLock,proto3" json:"rl_lock,omitempty"`
	RlBottom uint32 `protobuf:"varint,6,opt,name=rl_bottom,json=rlBottom,proto3" json:"rl_bottom,omitempty"`
	RlQoe    uint32 `protobuf:"varint,7,opt,name=rl_qoe,json=rlQoe,proto3" json:"rl_qoe,omitempty"`
	RlVol    uint32 `protobuf:"varint,8,opt,name=rl_vol,json=rlVol,proto3" json:"rl_vol,omitempty"`
	RlCur    uint32 `protobuf:"varint,9,opt,name=rl_cur,json=rlCur,proto3" json:"rl_cur,omitempty"`
	RlSeq    uint32 `protobuf:"varint,10,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *ResponsePush) Reset() {
	*x = ResponsePush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePush) ProtoMessage() {}

func (x *ResponsePush) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePush.ProtoReflect.Descriptor instead.
func (*ResponsePush) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{5}
}

func (x *ResponsePush) GetRlSlot() uint32 {
	if x != nil {
		return x.RlSlot
	}
	return 0
}

func (x *ResponsePush) GetRlPbid() uint64 {
	if x != nil {
		return x.RlPbid
	}
	return 0
}

func (x *ResponsePush) GetRlResult() uint32 {
	if x != nil {
		return x.RlResult
	}
	return 0
}

func (x *ResponsePush) GetRlCode() uint32 {
	if x != nil {
		return x.RlCode
	}
	return 0
}

func (x *ResponsePush) GetRlLock() uint32 {
	if x != nil {
		return x.RlLock
	}
	return 0
}

func (x *ResponsePush) GetRlBottom() uint32 {
	if x != nil {
		return x.RlBottom
	}
	return 0
}

func (x *ResponsePush) GetRlQoe() uint32 {
	if x != nil {
		return x.RlQoe
	}
	return 0
}

func (x *ResponsePush) GetRlVol() uint32 {
	if x != nil {
		return x.RlVol
	}
	return 0
}

func (x *ResponsePush) GetRlCur() uint32 {
	if x != nil {
		return x.RlCur
	}
	return 0
}

func (x *ResponsePush) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

// Query the inventory
type RequestInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlSeq uint32 `protobuf:"varint,1,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *RequestInventory) Reset() {
	*x = RequestInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInventory) ProtoMessage() {}

func (x *RequestInventory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInventory.ProtoReflect.Descriptor instead.
func (*RequestInventory) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{6}
}

func (x *RequestInventory) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

type CommandInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invent *RequestInventory `protobuf:"bytes,1,opt,name=invent,proto3" json:"invent,omitempty"`
	Device *Device           `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CommandInventory) Reset() {
	*x = CommandInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInventory) ProtoMessage() {}

func (x *CommandInventory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInventory.ProtoReflect.Descriptor instead.
func (*CommandInventory) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{7}
}

func (x *CommandInventory) GetInvent() *RequestInventory {
	if x != nil {
		return x.Invent
	}
	return nil
}

func (x *CommandInventory) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type ResponseInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlNum     uint32 `protobuf:"varint,1,opt,name=rl_num,json=rlNum,proto3" json:"rl_num,omitempty"`
	RlSlot    uint32 `protobuf:"varint,2,opt,name=rl_slot,json=rlSlot,proto3" json:"rl_slot,omitempty"`
	RlIdok    uint32 `protobuf:"varint,3,opt,name=rl_idok,json=rlIdok,proto3" json:"rl_idok,omitempty"`
	RlLock    uint32 `protobuf:"varint,4,opt,name=rl_lock,json=rlLock,proto3" json:"rl_lock,omitempty"`
	RlBottom  uint32 `protobuf:"varint,5,opt,name=rl_bottom,json=rlBottom,proto3" json:"rl_bottom,omitempty"`
	RlCharge  uint32 `protobuf:"varint,6,opt,name=rl_charge,json=rlCharge,proto3" json:"rl_charge,omitempty"`
	RlPbid    uint64 `protobuf:"varint,7,opt,name=rl_pbid,json=rlPbid,proto3" json:"rl_pbid,omitempty"`
	RlQoe     uint32 `protobuf:"varint,8,opt,name=rl_qoe,json=rlQoe,proto3" json:"rl_qoe,omitempty"`
	RlVol     uint32 `protobuf:"varint,9,opt,name=rl_vol,json=rlVol,proto3" json:"rl_vol,omitempty"`
	RlCur     uint32 `protobuf:"varint,10,opt,name=rl_cur,json=rlCur,proto3" json:"rl_cur,omitempty"`
	RlTmp     uint32 `protobuf:"varint,11,opt,name=rl_tmp,json=rlTmp,proto3" json:"rl_tmp,omitempty"`
	RlCode    uint32 `protobuf:"varint,12,opt,name=rl_code,json=rlCode,proto3" json:"rl_code,omitempty"`
	RlRevered uint32 `protobuf:"varint,13,opt,name=rl_revered,json=rlRevered,proto3" json:"rl_revered,omitempty"`
	RlSeq     uint32 `protobuf:"varint,14,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *ResponseInventory) Reset() {
	*x = ResponseInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseInventory) ProtoMessage() {}

func (x *ResponseInventory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseInventory.ProtoReflect.Descriptor instead.
func (*ResponseInventory) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseInventory) GetRlNum() uint32 {
	if x != nil {
		return x.RlNum
	}
	return 0
}

func (x *ResponseInventory) GetRlSlot() uint32 {
	if x != nil {
		return x.RlSlot
	}
	return 0
}

func (x *ResponseInventory) GetRlIdok() uint32 {
	if x != nil {
		return x.RlIdok
	}
	return 0
}

func (x *ResponseInventory) GetRlLock() uint32 {
	if x != nil {
		return x.RlLock
	}
	return 0
}

func (x *ResponseInventory) GetRlBottom() uint32 {
	if x != nil {
		return x.RlBottom
	}
	return 0
}

func (x *ResponseInventory) GetRlCharge() uint32 {
	if x != nil {
		return x.RlCharge
	}
	return 0
}

func (x *ResponseInventory) GetRlPbid() uint64 {
	if x != nil {
		return x.RlPbid
	}
	return 0
}

func (x *ResponseInventory) GetRlQoe() uint32 {
	if x != nil {
		return x.RlQoe
	}
	return 0
}

func (x *ResponseInventory) GetRlVol() uint32 {
	if x != nil {
		return x.RlVol
	}
	return 0
}

func (x *ResponseInventory) GetRlCur() uint32 {
	if x != nil {
		return x.RlCur
	}
	return 0
}

func (x *ResponseInventory) GetRlTmp() uint32 {
	if x != nil {
		return x.RlTmp
	}
	return 0
}

func (x *ResponseInventory) GetRlCode() uint32 {
	if x != nil {
		return x.RlCode
	}
	return 0
}

func (x *ResponseInventory) GetRlRevered() uint32 {
	if x != nil {
		return x.RlRevered
	}
	return 0
}

func (x *ResponseInventory) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

// Query Server Information
type RequestServerInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlType uint32 `protobuf:"varint,1,opt,name=rl_type,json=rlType,proto3" json:"rl_type,omitempty"`
	RlSeq  uint32 `protobuf:"varint,2,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *RequestServerInformation) Reset() {
	*x = RequestServerInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestServerInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestServerInformation) ProtoMessage() {}

func (x *RequestServerInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestServerInformation.ProtoReflect.Descriptor instead.
func (*RequestServerInformation) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{9}
}

func (x *RequestServerInformation) GetRlType() uint32 {
	if x != nil {
		return x.RlType
	}
	return 0
}

func (x *RequestServerInformation) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

type CommandServerInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerInfo *RequestServerInformation `protobuf:"bytes,1,opt,name=server_info,json=serverInfo,proto3" json:"server_info,omitempty"`
	Device     *Device                   `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CommandServerInformation) Reset() {
	*x = CommandServerInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandServerInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandServerInformation) ProtoMessage() {}

func (x *CommandServerInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandServerInformation.ProtoReflect.Descriptor instead.
func (*CommandServerInformation) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{10}
}

func (x *CommandServerInformation) GetServerInfo() *RequestServerInformation {
	if x != nil {
		return x.ServerInfo
	}
	return nil
}

func (x *CommandServerInformation) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type ResponseServerInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlType uint32 `protobuf:"varint,1,opt,name=rl_type,json=rlType,proto3" json:"rl_type,omitempty"`
	RlAdd  string `protobuf:"bytes,2,opt,name=rl_add,json=rlAdd,proto3" json:"rl_add,omitempty"`
	RlPort string `protobuf:"bytes,3,opt,name=rl_port,json=rlPort,proto3" json:"rl_port,omitempty"`
	RlSeq  uint32 `protobuf:"varint,4,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *ResponseServerInformation) Reset() {
	*x = ResponseServerInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseServerInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseServerInformation) ProtoMessage() {}

func (x *ResponseServerInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseServerInformation.ProtoReflect.Descriptor instead.
func (*ResponseServerInformation) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{11}
}

func (x *ResponseServerInformation) GetRlType() uint32 {
	if x != nil {
		return x.RlType
	}
	return 0
}

func (x *ResponseServerInformation) GetRlAdd() string {
	if x != nil {
		return x.RlAdd
	}
	return ""
}

func (x *ResponseServerInformation) GetRlPort() string {
	if x != nil {
		return x.RlPort
	}
	return ""
}

func (x *ResponseServerInformation) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

// Query Cabinet APN
type RequestCabinetAPN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlIndex uint32 `protobuf:"varint,1,opt,name=rl_index,json=rlIndex,proto3" json:"rl_index,omitempty"`
	RlSeq   uint32 `protobuf:"varint,2,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *RequestCabinetAPN) Reset() {
	*x = RequestCabinetAPN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCabinetAPN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCabinetAPN) ProtoMessage() {}

func (x *RequestCabinetAPN) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCabinetAPN.ProtoReflect.Descriptor instead.
func (*RequestCabinetAPN) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{12}
}

func (x *RequestCabinetAPN) GetRlIndex() uint32 {
	if x != nil {
		return x.RlIndex
	}
	return 0
}

func (x *RequestCabinetAPN) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

type CommandCabinetAPN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CabinetApn *RequestCabinetAPN `protobuf:"bytes,1,opt,name=cabinet_apn,json=cabinetApn,proto3" json:"cabinet_apn,omitempty"`
	Device     *Device            `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CommandCabinetAPN) Reset() {
	*x = CommandCabinetAPN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandCabinetAPN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandCabinetAPN) ProtoMessage() {}

func (x *CommandCabinetAPN) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandCabinetAPN.ProtoReflect.Descriptor instead.
func (*CommandCabinetAPN) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{13}
}

func (x *CommandCabinetAPN) GetCabinetApn() *RequestCabinetAPN {
	if x != nil {
		return x.CabinetApn
	}
	return nil
}

func (x *CommandCabinetAPN) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type ResponseCabinetAPN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlIndex  uint32 `protobuf:"varint,1,opt,name=rl_index,json=rlIndex,proto3" json:"rl_index,omitempty"`
	RlValid  uint32 `protobuf:"varint,2,opt,name=rl_valid,json=rlValid,proto3" json:"rl_valid,omitempty"`
	RlMccmnc string `protobuf:"bytes,3,opt,name=rl_mccmnc,json=rlMccmnc,proto3" json:"rl_mccmnc,omitempty"`
	RlApn    string `protobuf:"bytes,4,opt,name=rl_apn,json=rlApn,proto3" json:"rl_apn,omitempty"`
	RlUn     string `protobuf:"bytes,5,opt,name=rl_un,json=rlUn,proto3" json:"rl_un,omitempty"`
	RlPw     string `protobuf:"bytes,6,opt,name=rl_pw,json=rlPw,proto3" json:"rl_pw,omitempty"`
	RlSeq    uint32 `protobuf:"varint,7,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *ResponseCabinetAPN) Reset() {
	*x = ResponseCabinetAPN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCabinetAPN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCabinetAPN) ProtoMessage() {}

func (x *ResponseCabinetAPN) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCabinetAPN.ProtoReflect.Descriptor instead.
func (*ResponseCabinetAPN) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{14}
}

func (x *ResponseCabinetAPN) GetRlIndex() uint32 {
	if x != nil {
		return x.RlIndex
	}
	return 0
}

func (x *ResponseCabinetAPN) GetRlValid() uint32 {
	if x != nil {
		return x.RlValid
	}
	return 0
}

func (x *ResponseCabinetAPN) GetRlMccmnc() string {
	if x != nil {
		return x.RlMccmnc
	}
	return ""
}

func (x *ResponseCabinetAPN) GetRlApn() string {
	if x != nil {
		return x.RlApn
	}
	return ""
}

func (x *ResponseCabinetAPN) GetRlUn() string {
	if x != nil {
		return x.RlUn
	}
	return ""
}

func (x *ResponseCabinetAPN) GetRlPw() string {
	if x != nil {
		return x.RlPw
	}
	return ""
}

func (x *ResponseCabinetAPN) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

// Query SIM Card ICCID
type RequestSIMCardICCID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlSeq uint32 `protobuf:"varint,1,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *RequestSIMCardICCID) Reset() {
	*x = RequestSIMCardICCID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSIMCardICCID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSIMCardICCID) ProtoMessage() {}

func (x *RequestSIMCardICCID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSIMCardICCID.ProtoReflect.Descriptor instead.
func (*RequestSIMCardICCID) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{15}
}

func (x *RequestSIMCardICCID) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

type CommandSIMCardICCID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iccid  *RequestSIMCardICCID `protobuf:"bytes,1,opt,name=iccid,proto3" json:"iccid,omitempty"`
	Device *Device              `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CommandSIMCardICCID) Reset() {
	*x = CommandSIMCardICCID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSIMCardICCID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSIMCardICCID) ProtoMessage() {}

func (x *CommandSIMCardICCID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSIMCardICCID.ProtoReflect.Descriptor instead.
func (*CommandSIMCardICCID) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{16}
}

func (x *CommandSIMCardICCID) GetIccid() *RequestSIMCardICCID {
	if x != nil {
		return x.Iccid
	}
	return nil
}

func (x *CommandSIMCardICCID) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type ResponseSIMCardICCID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlIccid string `protobuf:"bytes,1,opt,name=rl_iccid,json=rlIccid,proto3" json:"rl_iccid,omitempty"`
	RlImei  string `protobuf:"bytes,2,opt,name=rl_imei,json=rlImei,proto3" json:"rl_imei,omitempty"`
	RlSeq   uint32 `protobuf:"varint,3,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *ResponseSIMCardICCID) Reset() {
	*x = ResponseSIMCardICCID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSIMCardICCID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSIMCardICCID) ProtoMessage() {}

func (x *ResponseSIMCardICCID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSIMCardICCID.ProtoReflect.Descriptor instead.
func (*ResponseSIMCardICCID) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{17}
}

func (x *ResponseSIMCardICCID) GetRlIccid() string {
	if x != nil {
		return x.RlIccid
	}
	return ""
}

func (x *ResponseSIMCardICCID) GetRlImei() string {
	if x != nil {
		return x.RlImei
	}
	return ""
}

func (x *ResponseSIMCardICCID) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

// Query Network Information
type RequestNetworkInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlSeq uint32 `protobuf:"varint,1,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *RequestNetworkInformation) Reset() {
	*x = RequestNetworkInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestNetworkInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNetworkInformation) ProtoMessage() {}

func (x *RequestNetworkInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNetworkInformation.ProtoReflect.Descriptor instead.
func (*RequestNetworkInformation) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{18}
}

func (x *RequestNetworkInformation) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

type CommandNetworkInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetInfo *RequestNetworkInformation `protobuf:"bytes,1,opt,name=net_info,json=netInfo,proto3" json:"net_info,omitempty"`
	Device  *Device                    `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CommandNetworkInformation) Reset() {
	*x = CommandNetworkInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandNetworkInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandNetworkInformation) ProtoMessage() {}

func (x *CommandNetworkInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandNetworkInformation.ProtoReflect.Descriptor instead.
func (*CommandNetworkInformation) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{19}
}

func (x *CommandNetworkInformation) GetNetInfo() *RequestNetworkInformation {
	if x != nil {
		return x.NetInfo
	}
	return nil
}

func (x *CommandNetworkInformation) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type ResponseNetworkInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlType   uint32 `protobuf:"varint,1,opt,name=rl_type,json=rlType,proto3" json:"rl_type,omitempty"`
	RlMode   uint32 `protobuf:"varint,2,opt,name=rl_mode,json=rlMode,proto3" json:"rl_mode,omitempty"`
	RlStatus uint32 `protobuf:"varint,3,opt,name=rl_status,json=rlStatus,proto3" json:"rl_status,omitempty"`
	RlConn   uint32 `protobuf:"varint,4,opt,name=rl_conn,json=rlConn,proto3" json:"rl_conn,omitempty"`
	RlCsq    uint64 `protobuf:"varint,5,opt,name=rl_csq,json=rlCsq,proto3" json:"rl_csq,omitempty"`
	RlRsrp   uint64 `protobuf:"varint,6,opt,name=rl_rsrp,json=rlRsrp,proto3" json:"rl_rsrp,omitempty"`
	RlSinr   uint64 `protobuf:"varint,7,opt,name=rl_sinr,json=rlSinr,proto3" json:"rl_sinr,omitempty"`
	RlWifi   uint64 `protobuf:"varint,8,opt,name=rl_wifi,json=rlWifi,proto3" json:"rl_wifi,omitempty"`
	RlSeq    uint32 `protobuf:"varint,9,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *ResponseNetworkInformation) Reset() {
	*x = ResponseNetworkInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseNetworkInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseNetworkInformation) ProtoMessage() {}

func (x *ResponseNetworkInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseNetworkInformation.ProtoReflect.Descriptor instead.
func (*ResponseNetworkInformation) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{20}
}

func (x *ResponseNetworkInformation) GetRlType() uint32 {
	if x != nil {
		return x.RlType
	}
	return 0
}

func (x *ResponseNetworkInformation) GetRlMode() uint32 {
	if x != nil {
		return x.RlMode
	}
	return 0
}

func (x *ResponseNetworkInformation) GetRlStatus() uint32 {
	if x != nil {
		return x.RlStatus
	}
	return 0
}

func (x *ResponseNetworkInformation) GetRlConn() uint32 {
	if x != nil {
		return x.RlConn
	}
	return 0
}

func (x *ResponseNetworkInformation) GetRlCsq() uint64 {
	if x != nil {
		return x.RlCsq
	}
	return 0
}

func (x *ResponseNetworkInformation) GetRlRsrp() uint64 {
	if x != nil {
		return x.RlRsrp
	}
	return 0
}

func (x *ResponseNetworkInformation) GetRlSinr() uint64 {
	if x != nil {
		return x.RlSinr
	}
	return 0
}

func (x *ResponseNetworkInformation) GetRlWifi() uint64 {
	if x != nil {
		return x.RlWifi
	}
	return 0
}

func (x *ResponseNetworkInformation) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

// Reset Cabinet
type RequestResetCabinet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlSeq uint32 `protobuf:"varint,1,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *RequestResetCabinet) Reset() {
	*x = RequestResetCabinet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestResetCabinet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestResetCabinet) ProtoMessage() {}

func (x *RequestResetCabinet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestResetCabinet.ProtoReflect.Descriptor instead.
func (*RequestResetCabinet) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{21}
}

func (x *RequestResetCabinet) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

type CommandResetCabinet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResetCabinet *RequestResetCabinet `protobuf:"bytes,1,opt,name=reset_cabinet,json=resetCabinet,proto3" json:"reset_cabinet,omitempty"`
	Device       *Device              `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CommandResetCabinet) Reset() {
	*x = CommandResetCabinet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResetCabinet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResetCabinet) ProtoMessage() {}

func (x *CommandResetCabinet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResetCabinet.ProtoReflect.Descriptor instead.
func (*CommandResetCabinet) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{22}
}

func (x *CommandResetCabinet) GetResetCabinet() *RequestResetCabinet {
	if x != nil {
		return x.ResetCabinet
	}
	return nil
}

func (x *CommandResetCabinet) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type ResponseResetCabinet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlResult uint32 `protobuf:"varint,1,opt,name=rl_result,json=rlResult,proto3" json:"rl_result,omitempty"`
	RlSeq    uint32 `protobuf:"varint,2,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *ResponseResetCabinet) Reset() {
	*x = ResponseResetCabinet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseResetCabinet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseResetCabinet) ProtoMessage() {}

func (x *ResponseResetCabinet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseResetCabinet.ProtoReflect.Descriptor instead.
func (*ResponseResetCabinet) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{23}
}

func (x *ResponseResetCabinet) GetRlResult() uint32 {
	if x != nil {
		return x.RlResult
	}
	return 0
}

func (x *ResponseResetCabinet) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

// Reports !!!
// Return the Power Bank
type RequestReturnPowerBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot      uint32 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	RlLock    uint32 `protobuf:"varint,2,opt,name=rl_lock,json=rlLock,proto3" json:"rl_lock,omitempty"`
	RlBottom  uint32 `protobuf:"varint,3,opt,name=rl_bottom,json=rlBottom,proto3" json:"rl_bottom,omitempty"`
	RlPdid    uint64 `protobuf:"varint,4,opt,name=rl_pdid,json=rlPdid,proto3" json:"rl_pdid,omitempty"`
	RlQoe     uint32 `protobuf:"varint,5,opt,name=rl_qoe,json=rlQoe,proto3" json:"rl_qoe,omitempty"`
	RlVol     uint64 `protobuf:"varint,6,opt,name=rl_vol,json=rlVol,proto3" json:"rl_vol,omitempty"`
	RlCur     uint64 `protobuf:"varint,7,opt,name=rl_cur,json=rlCur,proto3" json:"rl_cur,omitempty"`
	RlTmp     uint32 `protobuf:"varint,8,opt,name=rl_tmp,json=rlTmp,proto3" json:"rl_tmp,omitempty"`
	RlLimited uint32 `protobuf:"varint,9,opt,name=rl_limited,json=rlLimited,proto3" json:"rl_limited,omitempty"`
	RlCode    uint32 `protobuf:"varint,10,opt,name=rl_code,json=rlCode,proto3" json:"rl_code,omitempty"`
	RlSeq     uint32 `protobuf:"varint,11,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *RequestReturnPowerBank) Reset() {
	*x = RequestReturnPowerBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestReturnPowerBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestReturnPowerBank) ProtoMessage() {}

func (x *RequestReturnPowerBank) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestReturnPowerBank.ProtoReflect.Descriptor instead.
func (*RequestReturnPowerBank) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{24}
}

func (x *RequestReturnPowerBank) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *RequestReturnPowerBank) GetRlLock() uint32 {
	if x != nil {
		return x.RlLock
	}
	return 0
}

func (x *RequestReturnPowerBank) GetRlBottom() uint32 {
	if x != nil {
		return x.RlBottom
	}
	return 0
}

func (x *RequestReturnPowerBank) GetRlPdid() uint64 {
	if x != nil {
		return x.RlPdid
	}
	return 0
}

func (x *RequestReturnPowerBank) GetRlQoe() uint32 {
	if x != nil {
		return x.RlQoe
	}
	return 0
}

func (x *RequestReturnPowerBank) GetRlVol() uint64 {
	if x != nil {
		return x.RlVol
	}
	return 0
}

func (x *RequestReturnPowerBank) GetRlCur() uint64 {
	if x != nil {
		return x.RlCur
	}
	return 0
}

func (x *RequestReturnPowerBank) GetRlTmp() uint32 {
	if x != nil {
		return x.RlTmp
	}
	return 0
}

func (x *RequestReturnPowerBank) GetRlLimited() uint32 {
	if x != nil {
		return x.RlLimited
	}
	return 0
}

func (x *RequestReturnPowerBank) GetRlCode() uint32 {
	if x != nil {
		return x.RlCode
	}
	return 0
}

func (x *RequestReturnPowerBank) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

type CommandReturnPowerBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnPowerBank *RequestReturnPowerBank `protobuf:"bytes,1,opt,name=return_power_bank,json=returnPowerBank,proto3" json:"return_power_bank,omitempty"`
	Device          *Device                 `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CommandReturnPowerBank) Reset() {
	*x = CommandReturnPowerBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReturnPowerBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReturnPowerBank) ProtoMessage() {}

func (x *CommandReturnPowerBank) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReturnPowerBank.ProtoReflect.Descriptor instead.
func (*CommandReturnPowerBank) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{25}
}

func (x *CommandReturnPowerBank) GetReturnPowerBank() *RequestReturnPowerBank {
	if x != nil {
		return x.ReturnPowerBank
	}
	return nil
}

func (x *CommandReturnPowerBank) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type ResponseReturnPowerBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlSlot   uint32 `protobuf:"varint,1,opt,name=rl_slot,json=rlSlot,proto3" json:"rl_slot,omitempty"`
	RlResult uint32 `protobuf:"varint,2,opt,name=rl_result,json=rlResult,proto3" json:"rl_result,omitempty"`
	RlSeq    uint32 `protobuf:"varint,3,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *ResponseReturnPowerBank) Reset() {
	*x = ResponseReturnPowerBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseReturnPowerBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseReturnPowerBank) ProtoMessage() {}

func (x *ResponseReturnPowerBank) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseReturnPowerBank.ProtoReflect.Descriptor instead.
func (*ResponseReturnPowerBank) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{26}
}

func (x *ResponseReturnPowerBank) GetRlSlot() uint32 {
	if x != nil {
		return x.RlSlot
	}
	return 0
}

func (x *ResponseReturnPowerBank) GetRlResult() uint32 {
	if x != nil {
		return x.RlResult
	}
	return 0
}

func (x *ResponseReturnPowerBank) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

// Report Cabinet Login
type RequestReportCabinetLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlCount       uint32 `protobuf:"varint,1,opt,name=rl_count,json=rlCount,proto3" json:"rl_count,omitempty"`
	RlNetmode     uint32 `protobuf:"varint,2,opt,name=rl_netmode,json=rlNetmode,proto3" json:"rl_netmode,omitempty"`
	RlConn        uint32 `protobuf:"varint,3,opt,name=rl_conn,json=rlConn,proto3" json:"rl_conn,omitempty"`
	RlCsq         uint64 `protobuf:"varint,4,opt,name=rl_csq,json=rlCsq,proto3" json:"rl_csq,omitempty"`
	RlRsrp        uint64 `protobuf:"varint,5,opt,name=rl_rsrp,json=rlRsrp,proto3" json:"rl_rsrp,omitempty"`
	RlSinr        uint64 `protobuf:"varint,6,opt,name=rl_sinr,json=rlSinr,proto3" json:"rl_sinr,omitempty"`
	RlWifi        uint64 `protobuf:"varint,7,opt,name=rl_wifi,json=rlWifi,proto3" json:"rl_wifi,omitempty"`
	RlCommsoftver string `protobuf:"bytes,8,opt,name=rl_commsoftver,json=rlCommsoftver,proto3" json:"rl_commsoftver,omitempty"`
	RlCommhardver string `protobuf:"bytes,9,opt,name=rl_commhardver,json=rlCommhardver,proto3" json:"rl_commhardver,omitempty"`
	RlIccid       string `protobuf:"bytes,10,opt,name=rl_iccid,json=rlIccid,proto3" json:"rl_iccid,omitempty"`
	RlSeq         uint32 `protobuf:"varint,11,opt,name=rl_seq,json=rlSeq,proto3" json:"rl_seq,omitempty"`
}

func (x *RequestReportCabinetLogin) Reset() {
	*x = RequestReportCabinetLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestReportCabinetLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestReportCabinetLogin) ProtoMessage() {}

func (x *RequestReportCabinetLogin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestReportCabinetLogin.ProtoReflect.Descriptor instead.
func (*RequestReportCabinetLogin) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{27}
}

func (x *RequestReportCabinetLogin) GetRlCount() uint32 {
	if x != nil {
		return x.RlCount
	}
	return 0
}

func (x *RequestReportCabinetLogin) GetRlNetmode() uint32 {
	if x != nil {
		return x.RlNetmode
	}
	return 0
}

func (x *RequestReportCabinetLogin) GetRlConn() uint32 {
	if x != nil {
		return x.RlConn
	}
	return 0
}

func (x *RequestReportCabinetLogin) GetRlCsq() uint64 {
	if x != nil {
		return x.RlCsq
	}
	return 0
}

func (x *RequestReportCabinetLogin) GetRlRsrp() uint64 {
	if x != nil {
		return x.RlRsrp
	}
	return 0
}

func (x *RequestReportCabinetLogin) GetRlSinr() uint64 {
	if x != nil {
		return x.RlSinr
	}
	return 0
}

func (x *RequestReportCabinetLogin) GetRlWifi() uint64 {
	if x != nil {
		return x.RlWifi
	}
	return 0
}

func (x *RequestReportCabinetLogin) GetRlCommsoftver() string {
	if x != nil {
		return x.RlCommsoftver
	}
	return ""
}

func (x *RequestReportCabinetLogin) GetRlCommhardver() string {
	if x != nil {
		return x.RlCommhardver
	}
	return ""
}

func (x *RequestReportCabinetLogin) GetRlIccid() string {
	if x != nil {
		return x.RlIccid
	}
	return ""
}

func (x *RequestReportCabinetLogin) GetRlSeq() uint32 {
	if x != nil {
		return x.RlSeq
	}
	return 0
}

type CommandReportCabinetLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportCabinetLogin *RequestReportCabinetLogin `protobuf:"bytes,1,opt,name=report_cabinet_login,json=reportCabinetLogin,proto3" json:"report_cabinet_login,omitempty"`
	Device             *Device                    `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CommandReportCabinetLogin) Reset() {
	*x = CommandReportCabinetLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReportCabinetLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReportCabinetLogin) ProtoMessage() {}

func (x *CommandReportCabinetLogin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReportCabinetLogin.ProtoReflect.Descriptor instead.
func (*CommandReportCabinetLogin) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{28}
}

func (x *CommandReportCabinetLogin) GetReportCabinetLogin() *RequestReportCabinetLogin {
	if x != nil {
		return x.ReportCabinetLogin
	}
	return nil
}

func (x *CommandReportCabinetLogin) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type ResponseReportCabinetLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag bool `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *ResponseReportCabinetLogin) Reset() {
	*x = ResponseReportCabinetLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseReportCabinetLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseReportCabinetLogin) ProtoMessage() {}

func (x *ResponseReportCabinetLogin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseReportCabinetLogin.ProtoReflect.Descriptor instead.
func (*ResponseReportCabinetLogin) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{29}
}

func (x *ResponseReportCabinetLogin) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

var File_proto_proto protoreflect.FileDescriptor

var file_proto_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x77,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x6d, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2c, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x63,
	0x6d, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x3d, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53, 0x65, 0x71,
	0x22, 0x6a, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x75, 0x73, 0x68, 0x12,
	0x2d, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x2c,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x88, 0x02, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x73, 0x68, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x70, 0x62, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6c, 0x50, 0x62, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x6c, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x6c, 0x5f, 0x71, 0x6f, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x51,
	0x6f, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f,
	0x63, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x43, 0x75, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x72, 0x6c, 0x53, 0x65, 0x71, 0x22, 0x29, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x6c, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53,
	0x65, 0x71, 0x22, 0x78, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xf3, 0x02, 0x0a,
	0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6c, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x69, 0x64, 0x6f, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6c, 0x49, 0x64, 0x6f, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6c,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6c, 0x42, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x70, 0x62, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6c, 0x50, 0x62, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x71, 0x6f,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x51, 0x6f, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x72, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x43, 0x75, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x6c, 0x5f, 0x74, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c,
	0x54, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x6c, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53,
	0x65, 0x71, 0x22, 0x4a, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x73, 0x65,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53, 0x65, 0x71, 0x22, 0x91,
	0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d,
	0x71, 0x74, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x7b, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6c, 0x41, 0x64, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53, 0x65, 0x71, 0x22,
	0x45, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65,
	0x74, 0x41, 0x50, 0x4e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x72, 0x6c, 0x53, 0x65, 0x71, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x41, 0x50, 0x4e, 0x12, 0x40, 0x0a, 0x0b,
	0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x41,
	0x50, 0x4e, 0x52, 0x0a, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x41, 0x70, 0x6e, 0x12, 0x2c,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xbf, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74,
	0x41, 0x50, 0x4e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x72, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6c, 0x5f,
	0x6d, 0x63, 0x63, 0x6d, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6c,
	0x4d, 0x63, 0x63, 0x6d, 0x6e, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x61, 0x70, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6c, 0x41, 0x70, 0x6e, 0x12, 0x13, 0x0a,
	0x05, 0x72, 0x6c, 0x5f, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6c,
	0x55, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x6c, 0x5f, 0x70, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6c, 0x50, 0x77, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x73, 0x65,
	0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53, 0x65, 0x71, 0x22, 0x2c,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x49, 0x4d, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x43, 0x43, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53, 0x65, 0x71, 0x22, 0x7c, 0x0a, 0x13,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x49, 0x4d, 0x43, 0x61, 0x72, 0x64, 0x49, 0x43,
	0x43, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x49, 0x4d, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x43, 0x43, 0x49, 0x44, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x49, 0x4d, 0x43, 0x61, 0x72, 0x64, 0x49, 0x43, 0x43,
	0x49, 0x44, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6c, 0x5f, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6c, 0x49, 0x63, 0x63, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6c, 0x5f, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x6c, 0x49, 0x6d, 0x65, 0x69, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53, 0x65, 0x71, 0x22, 0x32, 0x0a,
	0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c,
	0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53, 0x65,
	0x71, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71,
	0x74, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0xfd, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x63,
	0x73, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6c, 0x43, 0x73, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x72, 0x73, 0x72, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6c, 0x52, 0x73, 0x72, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x73,
	0x69, 0x6e, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6c, 0x53, 0x69, 0x6e,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x72, 0x6c, 0x57, 0x69, 0x66, 0x69, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c,
	0x5f, 0x73, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53, 0x65,
	0x71, 0x22, 0x2c, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53, 0x65, 0x71, 0x22,
	0x8b, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65,
	0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x12,
	0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x4a, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61,
	0x62, 0x69, 0x6e, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53, 0x65, 0x71, 0x22, 0xa6, 0x02, 0x0a, 0x16, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x42, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6c, 0x4c, 0x6f, 0x63,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6c, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x70, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6c, 0x50, 0x64, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x71, 0x6f,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x51, 0x6f, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x72, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6c, 0x43, 0x75, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x6c, 0x5f, 0x74, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c,
	0x54, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x6c, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53,
	0x65, 0x71, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x50, 0x0a,
	0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x0f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x12,
	0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x66, 0x0a,
	0x17, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6c, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x72, 0x6c, 0x53, 0x65, 0x71, 0x22, 0xd0, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x6c, 0x4e, 0x65, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x63, 0x73, 0x71,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6c, 0x43, 0x73, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6c, 0x5f, 0x72, 0x73, 0x72, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6c, 0x52, 0x73, 0x72, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x73, 0x69, 0x6e,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6c, 0x53, 0x69, 0x6e, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6c, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6c, 0x57, 0x69, 0x66, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x73, 0x6f, 0x66, 0x74, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x73, 0x6f, 0x66, 0x74, 0x76, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x68, 0x61, 0x72, 0x64, 0x76, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x68,
	0x61, 0x72, 0x64, 0x76, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6c, 0x5f, 0x69, 0x63, 0x63,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6c, 0x49, 0x63, 0x63, 0x69,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x6c, 0x53, 0x65, 0x71, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x59, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d,
	0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x12, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x30, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x2a, 0xf8, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x55,
	0x53, 0x48, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x42, 0x49, 0x4e, 0x45, 0x54,
	0x5f, 0x41, 0x50, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x49,
	0x4d, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x43, 0x43, 0x49, 0x44, 0x10, 0x05, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52,
	0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4e, 0x4b,
	0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x42, 0x49,
	0x4e, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x43, 0x41, 0x42, 0x49, 0x4e, 0x45, 0x54, 0x10, 0x08, 0x32, 0xaf, 0x06, 0x0a,
	0x10, 0x4d, 0x71, 0x74, 0x74, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x56,
	0x31, 0x12, 0x48, 0x0a, 0x0d, 0x50, 0x75, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x6b, 0x12, 0x19, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x75, 0x73, 0x68, 0x1a, 0x1a, 0x2e,
	0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x73, 0x68, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x50, 0x75, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x6b, 0x12, 0x19, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x75, 0x73, 0x68, 0x1a, 0x1a, 0x2e, 0x77,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x73, 0x68, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x77,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x77,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12,
	0x6b, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x77, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x27, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x41, 0x50, 0x4e, 0x12,
	0x1f, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x41, 0x50, 0x4e,
	0x1a, 0x20, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x41,
	0x50, 0x4e, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x49, 0x4d,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x43, 0x43, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x77, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x49, 0x4d, 0x43, 0x61, 0x72, 0x64, 0x49, 0x43, 0x43, 0x49, 0x44, 0x1a, 0x22, 0x2e, 0x77,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x49, 0x4d, 0x43, 0x61, 0x72, 0x64, 0x49, 0x43, 0x43, 0x49, 0x44,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e,
	0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x28, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e,
	0x65, 0x74, 0x12, 0x21, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61,
	0x62, 0x69, 0x6e, 0x65, 0x74, 0x1a, 0x22, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x14, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c,
	0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x32, 0xdb,
	0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x31, 0x12,
	0x60, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x6b, 0x12, 0x24, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x1a, 0x25, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x1a, 0x28, 0x2e, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x62, 0x69, 0x6e, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x69, 0x72, 0x6f, 0x73,
	0x68, 0x69, 0x6e, 0x73, 0x76, 0x2f, 0x77, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x71,
	0x74, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x3b, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_proto_rawDescOnce sync.Once
	file_proto_proto_rawDescData = file_proto_proto_rawDesc
)

func file_proto_proto_rawDescGZIP() []byte {
	file_proto_proto_rawDescOnce.Do(func() {
		file_proto_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_proto_rawDescData)
	})
	return file_proto_proto_rawDescData
}

var file_proto_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_proto_proto_goTypes = []interface{}{
	(CommandType)(0),                   // 0: wcharge_mqtt.CommandType
	(*ResponseString)(nil),             // 1: wcharge_mqtt.ResponseString
	(*Device)(nil),                     // 2: wcharge_mqtt.Device
	(*Command)(nil),                    // 3: wcharge_mqtt.Command
	(*RequestPush)(nil),                // 4: wcharge_mqtt.RequestPush
	(*CommandPush)(nil),                // 5: wcharge_mqtt.CommandPush
	(*ResponsePush)(nil),               // 6: wcharge_mqtt.ResponsePush
	(*RequestInventory)(nil),           // 7: wcharge_mqtt.RequestInventory
	(*CommandInventory)(nil),           // 8: wcharge_mqtt.CommandInventory
	(*ResponseInventory)(nil),          // 9: wcharge_mqtt.ResponseInventory
	(*RequestServerInformation)(nil),   // 10: wcharge_mqtt.RequestServerInformation
	(*CommandServerInformation)(nil),   // 11: wcharge_mqtt.CommandServerInformation
	(*ResponseServerInformation)(nil),  // 12: wcharge_mqtt.ResponseServerInformation
	(*RequestCabinetAPN)(nil),          // 13: wcharge_mqtt.RequestCabinetAPN
	(*CommandCabinetAPN)(nil),          // 14: wcharge_mqtt.CommandCabinetAPN
	(*ResponseCabinetAPN)(nil),         // 15: wcharge_mqtt.ResponseCabinetAPN
	(*RequestSIMCardICCID)(nil),        // 16: wcharge_mqtt.RequestSIMCardICCID
	(*CommandSIMCardICCID)(nil),        // 17: wcharge_mqtt.CommandSIMCardICCID
	(*ResponseSIMCardICCID)(nil),       // 18: wcharge_mqtt.ResponseSIMCardICCID
	(*RequestNetworkInformation)(nil),  // 19: wcharge_mqtt.RequestNetworkInformation
	(*CommandNetworkInformation)(nil),  // 20: wcharge_mqtt.CommandNetworkInformation
	(*ResponseNetworkInformation)(nil), // 21: wcharge_mqtt.ResponseNetworkInformation
	(*RequestResetCabinet)(nil),        // 22: wcharge_mqtt.RequestResetCabinet
	(*CommandResetCabinet)(nil),        // 23: wcharge_mqtt.CommandResetCabinet
	(*ResponseResetCabinet)(nil),       // 24: wcharge_mqtt.ResponseResetCabinet
	(*RequestReturnPowerBank)(nil),     // 25: wcharge_mqtt.RequestReturnPowerBank
	(*CommandReturnPowerBank)(nil),     // 26: wcharge_mqtt.CommandReturnPowerBank
	(*ResponseReturnPowerBank)(nil),    // 27: wcharge_mqtt.ResponseReturnPowerBank
	(*RequestReportCabinetLogin)(nil),  // 28: wcharge_mqtt.RequestReportCabinetLogin
	(*CommandReportCabinetLogin)(nil),  // 29: wcharge_mqtt.CommandReportCabinetLogin
	(*ResponseReportCabinetLogin)(nil), // 30: wcharge_mqtt.ResponseReportCabinetLogin
}
var file_proto_proto_depIdxs = []int32{
	2,  // 0: wcharge_mqtt.Command.device:type_name -> wcharge_mqtt.Device
	0,  // 1: wcharge_mqtt.Command.cmd_type:type_name -> wcharge_mqtt.CommandType
	4,  // 2: wcharge_mqtt.CommandPush.push:type_name -> wcharge_mqtt.RequestPush
	2,  // 3: wcharge_mqtt.CommandPush.device:type_name -> wcharge_mqtt.Device
	7,  // 4: wcharge_mqtt.CommandInventory.invent:type_name -> wcharge_mqtt.RequestInventory
	2,  // 5: wcharge_mqtt.CommandInventory.device:type_name -> wcharge_mqtt.Device
	10, // 6: wcharge_mqtt.CommandServerInformation.server_info:type_name -> wcharge_mqtt.RequestServerInformation
	2,  // 7: wcharge_mqtt.CommandServerInformation.device:type_name -> wcharge_mqtt.Device
	13, // 8: wcharge_mqtt.CommandCabinetAPN.cabinet_apn:type_name -> wcharge_mqtt.RequestCabinetAPN
	2,  // 9: wcharge_mqtt.CommandCabinetAPN.device:type_name -> wcharge_mqtt.Device
	16, // 10: wcharge_mqtt.CommandSIMCardICCID.iccid:type_name -> wcharge_mqtt.RequestSIMCardICCID
	2,  // 11: wcharge_mqtt.CommandSIMCardICCID.device:type_name -> wcharge_mqtt.Device
	19, // 12: wcharge_mqtt.CommandNetworkInformation.net_info:type_name -> wcharge_mqtt.RequestNetworkInformation
	2,  // 13: wcharge_mqtt.CommandNetworkInformation.device:type_name -> wcharge_mqtt.Device
	22, // 14: wcharge_mqtt.CommandResetCabinet.reset_cabinet:type_name -> wcharge_mqtt.RequestResetCabinet
	2,  // 15: wcharge_mqtt.CommandResetCabinet.device:type_name -> wcharge_mqtt.Device
	25, // 16: wcharge_mqtt.CommandReturnPowerBank.return_power_bank:type_name -> wcharge_mqtt.RequestReturnPowerBank
	2,  // 17: wcharge_mqtt.CommandReturnPowerBank.device:type_name -> wcharge_mqtt.Device
	28, // 18: wcharge_mqtt.CommandReportCabinetLogin.report_cabinet_login:type_name -> wcharge_mqtt.RequestReportCabinetLogin
	2,  // 19: wcharge_mqtt.CommandReportCabinetLogin.device:type_name -> wcharge_mqtt.Device
	5,  // 20: wcharge_mqtt.MqttMiddlewareV1.PushPowerBank:input_type -> wcharge_mqtt.CommandPush
	5,  // 21: wcharge_mqtt.MqttMiddlewareV1.ForcePushPowerBank:input_type -> wcharge_mqtt.CommandPush
	8,  // 22: wcharge_mqtt.MqttMiddlewareV1.QueryInventory:input_type -> wcharge_mqtt.CommandInventory
	11, // 23: wcharge_mqtt.MqttMiddlewareV1.QueryServerInformation:input_type -> wcharge_mqtt.CommandServerInformation
	14, // 24: wcharge_mqtt.MqttMiddlewareV1.QueryCabinetAPN:input_type -> wcharge_mqtt.CommandCabinetAPN
	17, // 25: wcharge_mqtt.MqttMiddlewareV1.QuerySIMCardICCID:input_type -> wcharge_mqtt.CommandSIMCardICCID
	20, // 26: wcharge_mqtt.MqttMiddlewareV1.QueryNetworkInformation:input_type -> wcharge_mqtt.CommandNetworkInformation
	23, // 27: wcharge_mqtt.MqttMiddlewareV1.ResetCabinet:input_type -> wcharge_mqtt.CommandResetCabinet
	2,  // 28: wcharge_mqtt.MqttMiddlewareV1.Subscribe:input_type -> wcharge_mqtt.Device
	25, // 29: wcharge_mqtt.MainServerV1.ReturnPowerBank:input_type -> wcharge_mqtt.RequestReturnPowerBank
	28, // 30: wcharge_mqtt.MainServerV1.ReportCabinetLogin:input_type -> wcharge_mqtt.RequestReportCabinetLogin
	6,  // 31: wcharge_mqtt.MqttMiddlewareV1.PushPowerBank:output_type -> wcharge_mqtt.ResponsePush
	6,  // 32: wcharge_mqtt.MqttMiddlewareV1.ForcePushPowerBank:output_type -> wcharge_mqtt.ResponsePush
	9,  // 33: wcharge_mqtt.MqttMiddlewareV1.QueryInventory:output_type -> wcharge_mqtt.ResponseInventory
	12, // 34: wcharge_mqtt.MqttMiddlewareV1.QueryServerInformation:output_type -> wcharge_mqtt.ResponseServerInformation
	15, // 35: wcharge_mqtt.MqttMiddlewareV1.QueryCabinetAPN:output_type -> wcharge_mqtt.ResponseCabinetAPN
	18, // 36: wcharge_mqtt.MqttMiddlewareV1.QuerySIMCardICCID:output_type -> wcharge_mqtt.ResponseSIMCardICCID
	21, // 37: wcharge_mqtt.MqttMiddlewareV1.QueryNetworkInformation:output_type -> wcharge_mqtt.ResponseNetworkInformation
	24, // 38: wcharge_mqtt.MqttMiddlewareV1.ResetCabinet:output_type -> wcharge_mqtt.ResponseResetCabinet
	1,  // 39: wcharge_mqtt.MqttMiddlewareV1.Subscribe:output_type -> wcharge_mqtt.ResponseString
	27, // 40: wcharge_mqtt.MainServerV1.ReturnPowerBank:output_type -> wcharge_mqtt.ResponseReturnPowerBank
	30, // 41: wcharge_mqtt.MainServerV1.ReportCabinetLogin:output_type -> wcharge_mqtt.ResponseReportCabinetLogin
	31, // [31:42] is the sub-list for method output_type
	20, // [20:31] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_proto_init() }
func file_proto_proto_init() {
	if File_proto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestServerInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandServerInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseServerInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCabinetAPN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandCabinetAPN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCabinetAPN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSIMCardICCID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSIMCardICCID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSIMCardICCID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestNetworkInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandNetworkInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseNetworkInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestResetCabinet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResetCabinet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseResetCabinet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestReturnPowerBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReturnPowerBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseReturnPowerBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestReportCabinetLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReportCabinetLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseReportCabinetLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_proto_goTypes,
		DependencyIndexes: file_proto_proto_depIdxs,
		EnumInfos:         file_proto_proto_enumTypes,
		MessageInfos:      file_proto_proto_msgTypes,
	}.Build()
	File_proto_proto = out.File
	file_proto_proto_rawDesc = nil
	file_proto_proto_goTypes = nil
	file_proto_proto_depIdxs = nil
}
